<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>nacos笔记</title>
      <link href="/2025/03/17/nacos%E7%AC%94%E8%AE%B0/"/>
      <url>/2025/03/17/nacos%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Nacos-是什么？"><a href="#Nacos-是什么？" class="headerlink" title="Nacos 是什么？"></a>Nacos 是什么？</h1><p> <strong>一句话:Nacos 就是注册中心[替代Eureka]+配置中心[替代Config] , (Nacos：Dynamic Naming and Configuration Service)</strong></p><p><strong>Nacos：</strong>架构理论基础:CAP理论 (支持AP和CP, 可以切换)</p><img src="https://cbhliving.oss-cn-guangzhou.aliyuncs.com/blog/capimg.jpeg" alt="https://cbhliving.oss-cn-guangzhou.aliyuncs.com/blog/capimg.jpeg" style="zoom:50%;" /><h1 id="Nacos对比Zookeeper和Eureka"><a href="#Nacos对比Zookeeper和Eureka" class="headerlink" title="Nacos对比Zookeeper和Eureka"></a>Nacos对比Zookeeper和Eureka</h1><h3 id="一、一致性协议与架构设计"><a href="#一、一致性协议与架构设计" class="headerlink" title="一、一致性协议与架构设计"></a>一、<strong>一致性协议与架构设计</strong></h3><p><strong>1.Nacos</strong></p><ul><li><strong>Cap模式：</strong>支持 AP（高可用性）和 CP（数据一致性）模式的动态切换。默认采用 AP 模式，适合服务发现场景；当需要强一致性时（如配置管理），可通过 Raft 协议切换至 CP 模式</li><li><strong>连接方式：</strong>基于 Netty 长连接，支持服务列表变更的实时推送，减少客户端轮询开销</li></ul><p><strong>2.Zookeeper</strong></p><ul><li><strong>CAP 模式</strong>：严格遵循 CP 模式，通过 ZAB 协议保证数据强一致性，但在网络分区或 Leader 选举期间（30-120 秒）服务不可用，牺牲了可用性</li><li><strong>数据模型</strong>：基于树形节点（ZNode）存储服务信息，依赖临时节点实现服务上下线自动感知</li></ul><p><strong>3.Eureka</strong></p><ul><li><strong>CAP 模式</strong>：纯 AP 模式，通过去中心化架构（Peer-to-Peer）保证高可用性，但数据一致性较弱，可能出现短暂的服务列表不一致</li><li><strong>自我保护机制</strong>：在心跳异常时暂停剔除服务实例，避免因网络抖动导致服务误判下线</li></ul><h3 id="二、功能特性对比"><a href="#二、功能特性对比" class="headerlink" title="二、功能特性对比"></a>二、<strong>功能特性对比</strong></h3><table><thead><tr><th align="left">特性</th><th><strong>Nacos</strong></th><th><strong>Zookeeper</strong></th><th><strong>Eureka</strong></th></tr></thead><tbody><tr><td align="left"><strong>服务健康检查</strong></td><td>支持 TCP&#x2F;HTTP&#x2F;MySQL 等多种方式，区分临时实例（心跳检测）和永久实例（服务端主动探测）</td><td>基于临时节点的会话心跳检测</td><td>仅依赖客户端心跳上报</td></tr><tr><td align="left"><strong>动态配置管理</strong></td><td>集成配置中心，支持配置实时推送</td><td>需自行实现（如监听节点变化）</td><td>不支持</td></tr><tr><td align="left"><strong>负载均衡</strong></td><td>内置权重、元数据筛选策略</td><td>无原生支持，需结合其他工具</td><td>依赖 Ribbon 客户端负载均衡</td></tr><tr><td align="left"><strong>多数据中心支持</strong></td><td>支持跨注册中心同步服务信息</td><td>不支持</td><td>不支持</td></tr><tr><td align="left"><strong>生态集成</strong></td><td>兼容 Spring Cloud、Dubbo、K8s</td><td>主要用于 Dubbo、Hadoop 生态</td><td>与 Spring Cloud 深度绑定</td></tr></tbody></table><h3 id="三、适用场景"><a href="#三、适用场景" class="headerlink" title="三、适用场景"></a>三、<strong>适用场景</strong></h3><p><strong>1.Nacos</strong></p><ul><li><strong>推荐场景</strong>：需要同时管理服务注册与动态配置的微服务架构；对高可用性和一致性有灵活需求的云原生系统</li><li><strong>典型案例</strong>：电商平台的多服务协调、Kubernetes 环境下的服务治理。</li></ul><p><strong>2.Zookeeper</strong></p><ul><li><strong>推荐场景</strong>：强一致性要求的分布式协调场景（如分布式锁、配置管理），或传统 Dubbo 框架的注册中心</li><li><strong>局限</strong>：注册中心功能需自行封装，不适合纯服务发现的轻量级需求</li></ul><p><strong>3.Eureka</strong></p><ul><li><strong>推荐场景</strong>：Spring Cloud 生态下的纯服务发现场景，追求快速集成和简单运维</li><li><strong>局限</strong>：功能单一，无配置管理，且 Netflix 已停止维护，社区活跃度下降</li></ul><h3 id="四、性能与部署"><a href="#四、性能与部署" class="headerlink" title="四、性能与部署"></a>四、<strong>性能与部署</strong></h3><ul><li><strong>性能：</strong></li></ul><p>​Nacos 支持百万级服务实例注册，吞吐量优于 Zookeeper（受限于 ZAB 协议）和 Eureka（实例规模超 5000 时可能不稳定）</p><ul><li><strong>部署复杂度</strong>：</li></ul><p>​Nacos 和 Eureka 支持单机&#x2F;集群快速部署；Zookeeper 需手动配置集群和 Leader 选举，运维成本较高</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>Nacos</strong> 是功能最全面的现代注册中心，适合复杂微服务架构；</li><li><strong>Zookeeper</strong> 更适合强一致性要求的分布式协调场景；</li><li><strong>Eureka</strong> 在 Spring Cloud 生态中简单易用，但功能单一且逐步被替代。</li></ul><p>根据业务需求选择：优先 Nacos（综合需求）、Zookeeper（强一致性协调）、Eureka（遗留 Spring Cloud 系统）。</p><h1 id="Nacos-下载-运行"><a href="#Nacos-下载-运行" class="headerlink" title="Nacos 下载&amp;运行"></a>Nacos 下载&amp;运行</h1><ol><li><p><strong>下载: <a href="https://github.com/alibaba/nacos/releases/tag/1.2.1">https://github.com/alibaba/nacos/releases/tag/1.2.1</a></strong></p></li><li><p><strong>解压，运行bin&#x2F;sdtartup.cmd</strong></p><img src="https://cbhliving.oss-cn-guangzhou.aliyuncs.com/blog/nacosstart.bmp" style="zoom:50%;" /></li><li><p><strong>打开浏览器输入<a href="http://localhost:8848/nacos/#/login">http://localhost:8848/nacos/#/login</a>如果能看到以下画面代表启动成功</strong></p></li></ol><p>​<img src="https://cbhliving.oss-cn-guangzhou.aliyuncs.com/blog/nacoslogin.jpeg" style="zoom:50%;" /></p><h1 id="注册服务到Nacos"><a href="#注册服务到Nacos" class="headerlink" title="注册服务到Nacos"></a>注册服务到Nacos</h1><ol><li><p><strong>修改pom文件(父项目和本项目)</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!--在父项目统一加入spring-cloud-alibaba 依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在微服务模块引入nacos-discovery starter--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>在appication加入:</strong></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#配置nacos server的地址</span></span><br><span class="line">    <span class="attr">application:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">cbhliving_commodity</span></span><br></pre></td></tr></table></figure></li><li><p><strong>在主启动类加上注解<code>@EnableDiscoveryClient</code></strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CbhCommodityApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(CbhCommodityApplication.class , args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>启动该服务查看nacos注册中心的服务列表（观察是否存在服务名为cbhliving_commodity的服务）</strong></p><p><img src="https://cbhliving.oss-cn-guangzhou.aliyuncs.com/blog/nacosdiscover.jpeg"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nocas </tag>
            
            <tag> 微服务 </tag>
            
            <tag> springcloud </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker拉取镜像时出现的BUG</title>
      <link href="/2025/03/13/Bug2025-3-11-1/"/>
      <url>/2025/03/13/Bug2025-3-11-1/</url>
      
        <content type="html"><![CDATA[<h1 id="BUG"><a href="#BUG" class="headerlink" title="BUG"></a>BUG</h1><p>起始: 使用docker拉取镜像仓库时提示<code>Error response from daemon: Get ‘https://registry-1.docker.io/v2/’</code></p><p>原因: 使用的镜像源网站不能用了</p><p>解决方法:到docker的配置文件&#x2F;etc&#x2F;docker&#x2F;daemon.json 换新的镜像源(可以网上直接查)后执行以下命令: sudo systemctl daemon-reload &amp;&amp; sudo systemctl restart docker</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">   <span class="string">&quot;https://docker.1ms.run&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="string">&quot;https://docker.xuanyuan.me&quot;</span></span><br><span class="line"> <span class="punctuation">]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>启动docker的容器出现的bug</title>
      <link href="/2025/03/13/Bug2025-3-11-2/"/>
      <url>/2025/03/13/Bug2025-3-11-2/</url>
      
        <content type="html"><![CDATA[<h1 id="Bug"><a href="#Bug" class="headerlink" title="Bug"></a><strong>Bug</strong></h1><p>起始: 使用docker run  –name test命令启动并创建容器发现容器一启动就自动退出 , 使用 <code>docker start test</code> 命令也没用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost vagrant]# docker run --name test -d centos /bin/bash</span><br><span class="line">956977ec4620bf6882dc80a6bfc4e42b94533c30ba3a487281b230b4aa47d41c</span><br><span class="line">[root@localhost vagrant]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE       COMMAND                  CREATED          STATUS                      PORTS                                                  NAMES</span><br><span class="line">956977ec4620   centos      &quot;/bin/bash&quot;              31 seconds ago   Exited (0) 30 seconds ago                                                          test</span><br><span class="line">e6de62885f52   mysql:5.7   &quot;docker-entrypoint.s…&quot;   2 days ago       Up 6 minutes                0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp, 33060/tcp   mysql</span><br></pre></td></tr></table></figure><p>原因:docker容器运行时,如果没有前台进程运行,容器处于空闲状态就会自动退出</p><p>解决方法: 使用<code>docker run test2 -dit centos /bin/bash</code> 命令可以让容器一直在后台运行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost vagrant]# docker run --name test2 -dit centos /bin/bash</span><br><span class="line">822b658eb582f3652df9e52d04ddf271f7d382ed21a2e8fab1483a5c46be30da</span><br><span class="line">[root@localhost vagrant]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE       COMMAND                  CREATED          STATUS                     PORTS                                                 </span><br><span class="line">822b658eb582   centos      &quot;/bin/bash&quot;              40 seconds ago   Up 39 seconds                                                                     test2</span><br><span class="line">956977ec4620   centos      &quot;/bin/bash&quot;              3 minutes ago    Exited (0) 3 minutes ago                                                          test</span><br><span class="line">e6de62885f52   mysql:5.7   &quot;docker-entrypoint.s…&quot;   2 days ago       Up 8 minutes               0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp, 33060/tcp   mysql</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这时关闭后再启动也可以了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost vagrant]# docker stop test2</span><br><span class="line">test2</span><br><span class="line">[root@localhost vagrant]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE       COMMAND                  CREATED         STATUS                     PORTS                                                  NAMES</span><br><span class="line">822b658eb582   centos      &quot;/bin/bash&quot;              3 minutes ago   Exited (0) 6 seconds ago                                                          test2</span><br><span class="line">956977ec4620   centos      &quot;/bin/bash&quot;              5 minutes ago   Exited (0) 5 minutes ago                                                          test</span><br><span class="line">e6de62885f52   mysql:5.7   &quot;docker-entrypoint.s…&quot;   2 days ago      Up 45 seconds              0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp, 33060/tcp   mysql</span><br><span class="line">[root@localhost vagrant]# docker start test2</span><br><span class="line">test2</span><br><span class="line">[root@localhost vagrant]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE       COMMAND                  CREATED         STATUS                     PORTS                                                  NAMES</span><br><span class="line">822b658eb582   centos      &quot;/bin/bash&quot;              3 minutes ago   Up 1 second                                                                       test2</span><br><span class="line">956977ec4620   centos      &quot;/bin/bash&quot;              5 minutes ago   Exited (0) 5 minutes ago                                                          test</span><br><span class="line"></span><br><span class="line">e6de62885f52   mysql:5.7   &quot;docker-entrypoint.s…&quot;   2 days ago      Up 52 seconds              0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp, 33060/tcp   mysql</span><br></pre></td></tr></table></figure><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      <categories>
          
          <category> 编程日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建keepalived+nginx集群出现的一些bug</title>
      <link href="/2025/03/05/Bug2025-3-5/"/>
      <url>/2025/03/05/Bug2025-3-5/</url>
      
        <content type="html"><![CDATA[<h1 id="BUG1"><a href="#BUG1" class="headerlink" title="BUG1"></a>BUG1</h1><p>起始：ping不到keepalived的虚拟IP</p><p>解决方法：注释掉keepalived.conf的vrrp_strict</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">     acassen@firewall.loc</span><br><span class="line">     failover@firewall.loc</span><br><span class="line">     sysadmin@firewall.loc</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class="line">   smtp_server 192.168.200.1</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id cbh100</span><br><span class="line">   vrrp_skip_check_adv_addr</span><br><span class="line">   #vrrp_strict</span><br><span class="line">   vrrp_garp_interval 0</span><br><span class="line">   vrrp_gna_interval 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="BUG2"><a href="#BUG2" class="headerlink" title="BUG2"></a>BUG2</h1><p>起始：给keepalived写了一个根据nginx是否关闭来终止keepalived的监控脚本，但是无法执行  ， 脚本代码本身没有问题</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo &quot;start&quot;</span><br><span class="line">num=`ps -C nginx --no-header | wc -l`</span><br><span class="line">if [ $num -eq 0 ];then</span><br><span class="line"> killall keepalived</span><br><span class="line">fi</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>脚本代码执行效果：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@chenbaohui keepalived]# ps -ef | grep nginx</span><br><span class="line">root      13218   2611  0 00:19 pts/0    00:00:00 grep --color=auto nginx</span><br><span class="line">[root@chenbaohui keepalived]# ps -ef | grep keepalived </span><br><span class="line">root      12840      1  0 Mar04 ?        00:00:00 /usr/local/sbin/keepalived</span><br><span class="line">root      12841  12840  0 Mar04 ?        00:00:00 /usr/local/sbin/keepalived</span><br><span class="line">root      12842  12840  0 Mar04 ?        00:00:00 /usr/local/sbin/keepalived</span><br><span class="line">root      13220   2611  0 00:19 pts/0    00:00:00 grep --color=auto keepalived</span><br><span class="line">[root@chenbaohui keepalived]# bash ch_nginx.sh </span><br><span class="line">start</span><br><span class="line">[root@chenbaohui keepalived]# ps -ef | grep keepalived </span><br><span class="line">root      13260   2611  0 00:20 pts/0    00:00:00 grep --color=auto keepalived</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>实际运行效果：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@chenbaohui sbin]# ./nginx -s stop</span><br><span class="line">[root@chenbaohui sbin]# ps -ef | grep nginx</span><br><span class="line">root      12884   2611  0 00:00 pts/0    00:00:00 grep --color=auto nginx</span><br><span class="line">[root@chenbaohui sbin]# ps -ef | grep keepalived</span><br><span class="line">root      12840      1  0 Mar04 ?        00:00:00 /usr/local/sbin/keepalived</span><br><span class="line">root      12841  12840  0 Mar04 ?        00:00:00 /usr/local/sbin/keepalived</span><br><span class="line">root      12842  12840  0 Mar04 ?        00:00:00 /usr/local/sbin/keepalived</span><br><span class="line">root      12891   2611  0 00:01 pts/0    00:00:00 grep --color=auto keepalived</span><br></pre></td></tr></table></figure><p>解决方法：发现是自己粗心大意把keepalived.conf里面的配置脚本节点，<code>script &quot;/etc/keepalived/ch_nginx.sh&quot;</code>写成了<code>sript &quot;/etc/keepalived/ch_nginx.sh&quot;</code>，改回来就好了</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@chenbaohui sbin]# ps -ef | grep nginx</span><br><span class="line">root      13593      1  0 00:35 ?        00:00:00 nginx: master process ./nginx</span><br><span class="line">nobody    13594  13593  0 00:35 ?        00:00:00 nginx: worker process</span><br><span class="line">nobody    13595  13593  0 00:35 ?        00:00:00 nginx: worker process</span><br><span class="line">root      13688   2611  0 00:36 pts/0    00:00:00 grep --color=auto nginx</span><br><span class="line">[root@chenbaohui sbin]# ls</span><br><span class="line">nginx</span><br><span class="line">[root@chenbaohui sbin]# ./nginx -s stop</span><br><span class="line">[root@chenbaohui sbin]# ps -ef | grep nginx</span><br><span class="line">root      13977   2611  0 00:38 pts/0    00:00:00 grep --color=auto nginx</span><br><span class="line">[root@chenbaohui sbin]# ps -ef | grep keepalived</span><br><span class="line">root      13979   2611  0 00:38 pts/0    00:00:00 grep --color=auto keepalived</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> Keepalived </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整合openfeign和seata出现的Bug2025.2.28</title>
      <link href="/2025/03/01/Bug2025-2-28/"/>
      <url>/2025/03/01/Bug2025-2-28/</url>
      
        <content type="html"><![CDATA[<h1 id="2025-2-28Bug"><a href="#2025-2-28Bug" class="headerlink" title="2025.2.28Bug"></a>2025.2.28Bug</h1><h2 id="Bug1-已解决"><a href="#Bug1-已解决" class="headerlink" title="Bug1(已解决)"></a>Bug1(已解决)</h2><p><strong>起始：</strong>启动服务时不能与seata-server建立连接，发现是application.yml的seata事物组tx_service_group配置错误（与seata-server的file.conf的tx_service_group不一致）<br><strong>解决方法：</strong>改成一样就好了</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">alibaba:</span></span><br><span class="line">      <span class="attr">seata:</span></span><br><span class="line"><span class="comment">#指定事务组名称 ， 与seata-server对应/conf/file.conf</span></span><br><span class="line">        <span class="attr">tx-service-group:</span> <span class="string">cbh_order_tx_group</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">service</span> &#123;</span><br><span class="line">  <span class="comment">#vgroup-&gt;rgroup</span></span><br><span class="line">  <span class="string">vgroup_mapping.cbh_order_tx_group</span> <span class="string">=</span> <span class="string">&quot;default&quot;</span></span><br><span class="line">  <span class="comment">#only support single node</span></span><br><span class="line">  <span class="string">default.grouplist</span> <span class="string">=</span> <span class="string">&quot;127.0.0.1:8091&quot;</span></span><br><span class="line">  <span class="comment">#degrade current not support</span></span><br><span class="line">  <span class="string">enableDegrade</span> <span class="string">=</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment">#disable</span></span><br><span class="line">  <span class="string">disable</span> <span class="string">=</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment">#unit ms,s,m,h,d represents milliseconds, seconds, minutes, hours, days, default permanent</span></span><br><span class="line">  <span class="string">max.commit.retry.timeout</span> <span class="string">=</span> <span class="string">&quot;-1&quot;</span></span><br><span class="line">  <span class="string">max.rollback.retry.timeout</span> <span class="string">=</span> <span class="string">&quot;-1&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Bug2（已解决）"><a href="#Bug2（已解决）" class="headerlink" title="Bug2（已解决）"></a>Bug2（已解决）</h2><p>起始：使用<code>@GlobalTransactional</code>做全局事务控制的时候发现seata的日志虽然显示全局事务被回滚（<code>rollback status:Rollbacked</code>）  ，但是数据库的数据仍然被修改了，找了老半天结果发现是seata代理数据源的配置类忘记加上<code>@Configuration</code>注解了，配置没有生效，而且注入<code>mapperLocations</code>的注解还写错了，导致启动一直失败。。。。</p><p><img src="https://ts1.cn.mm.bing.net/th?id=OIP-C.75ZfUwR5O7r3uoSDrcxAtwHaHG&w=255&h=244&c=8&rs=1&qlt=90&r=0&o=6&dpr=1.5&pid=3.1&rm=2"></p><p>解决方法：给seata代理数据源的配置类加上<code>@Configuration</code>注解和修改注入<code>mapperLocations</code>的注解</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSourceProxyConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;mybatis.mapper-locations&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String mapperLocation;</span><br><span class="line">    <span class="comment">//配置durid数据池</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">druidDatasource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//配置datasourceproxy使用seata代理数据源</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSourceProxy <span class="title function_">dataSourceProxy</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DataSourceProxy</span>(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//配置sqlsessionfactory</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactory <span class="title function_">sqlSessionFactoryBean</span><span class="params">(DataSourceProxy dataSourceProxy)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SqlSessionFactoryBean</span> <span class="variable">sqlSessionFactoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        sqlSessionFactoryBean.setDataSource(dataSourceProxy);</span><br><span class="line">        sqlSessionFactoryBean.setMapperLocations(<span class="keyword">new</span> <span class="title class_">PathMatchingResourcePatternResolver</span>().getResources(mapperLocation));</span><br><span class="line">        sqlSessionFactoryBean.setTransactionFactory(<span class="keyword">new</span> <span class="title class_">SpringManagedTransactionFactory</span>());</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactoryBean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> Bug </tag>
            
            <tag> Seata </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>启动seata-server出现的Bug2025.2.27</title>
      <link href="/2025/02/28/Bug2025-2-27/"/>
      <url>/2025/02/28/Bug2025-2-27/</url>
      
        <content type="html"><![CDATA[<h1 id="2025-2-27Bug日志"><a href="#2025-2-27Bug日志" class="headerlink" title="2025.2.27Bug日志"></a>2025.2.27Bug日志</h1><h2 id="Bug1（已解决）"><a href="#Bug1（已解决）" class="headerlink" title="Bug1（已解决）"></a>Bug1（已解决）</h2><p><strong>起始</strong>：想将jdk19修改为jdk8结果jdk环境路径修改后使用 java  -version查看版本仍然不变。<br><strong>尝试1（未成功）：</strong>删除用户变量的原jdk路径<br><strong>尝试2（未成功）：</strong>删除系统变量的jdk路径，结果发现jdk版本变为11（此时path已经没有<code>%JAVA_HOME%/bin</code>和<code>%JAVA_HOME%/jre/bin</code>了不知道为什么会有jdk11）<br><strong>尝试3（成功）：</strong>在系统环境中添加JAVA_HOME后在path添加<code>%JAVA_HOME%/bin</code>和<code>%JAVA_HOME%/jre/bin</code></p><p><img src="/../images/2025.2.27bug1.1.jpg" alt="2025.2.27bug1.1"></p><p><img src="/../images/2025.2.27bug1.2.jpg" alt="2025.2.27bug1.2"></p><h2 id="Bug2（已解决）"><a href="#Bug2（已解决）" class="headerlink" title="Bug2（已解决）"></a>Bug2（已解决）</h2><p><strong>起始</strong>：启动<code>seata-server</code>失败，发现是jdk版本不兼容（jdk19版本太新），要降到jdk8<br><strong>解决方法</strong>：在Bug1解决了</p><h2 id="Bug3（已解决）"><a href="#Bug3（已解决）" class="headerlink" title="Bug3（已解决）"></a>Bug3（已解决）</h2><p><strong>起始</strong>：启动<code>seata-server</code>时报错，发现是<code>java-connecter-mysql5.1.30</code>与<code>MySQL5.1.49</code>版本不兼容<br><strong>解决办法</strong>：下载<code>mysql-connector-java-5.1.49</code>到<code>seata-server</code>的lib文件中并将<code>mysql-connector-java-5.1.30</code>删除</p><p><img src="/../images/2025.2.27bug3.1.jpg" alt="2025.2.27bug3.1"></p><p><img src="/../images/2025.2.27bug3.2.jpg" alt="2025.2.27bug3.2"></p>]]></content>
      
      
      <categories>
          
          <category> 编程日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> Bug </tag>
            
            <tag> Seata </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单JAVA程序</title>
      <link href="/2024/12/26/JAVA-HelloWorld/"/>
      <url>/2024/12/26/JAVA-HelloWorld/</url>
      
        <content type="html"><![CDATA[<h1 id="一个简单JAVA程序"><a href="#一个简单JAVA程序" class="headerlink" title="一个简单JAVA程序"></a>一个简单JAVA程序</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">helloworld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello world!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/12/25/hello-world/"/>
      <url>/2024/12/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
